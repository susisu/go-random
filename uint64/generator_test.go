package random

import (
	"math/rand"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

type mockSource64 struct {
	src []uint64
	i   int
}

func (s *mockSource64) Int63() int64 {
	panic("not implemented")
}

func (s *mockSource64) Seed(seed int64) {
	panic("not implemented")
}

func (s *mockSource64) Uint64() uint64 {
	n := s.i
	s.i += 1
	return s.src[n]
}

func TestFromSource64(t *testing.T) {
	testRng := rand.New(rand.NewSource(time.Now().UnixNano()))
	src := make([]uint64, 0, 5)
	for i, _ := range src {
		src[i] = testRng.Uint64()
	}

	g := FromSource64(&mockSource64{src: src})
	seq := make([]uint64, 0, len(src))
	for range src {
		seq = append(seq, g.Uint64())
	}

	assert.Equal(t, src, seq, "returns values as-is generated by the source")
}
